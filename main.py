
import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ—Ç BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

users = {}
orders = []
taken_orders = {}

class Register(StatesGroup):
    waiting_for_info = State()

class Order(StatesGroup):
    waiting_for_description = State()

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
            "üßë‚Äçüéì –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\nüè´ –ú–µ—Å—Ç–æ —É—á—ë–±—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "üë§ –ü—Ä–∏–º–µ—Ä: –ê—Ä—Å—Ç–∞–Ω–≥–∞–ª–∏–µ–≤ –ê–º–∞–Ω, –ö–ê–ó–ì–ê–°–ê, –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"
        )
        await Register.waiting_for_info.set()
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:\nüìù /neworder ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\nüìã /orders ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã")

@dp.message_handler(state=Register.waiting_for_info)
async def process_registration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users[user_id] = message.text
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n‚Äî üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã (/neworder)\n‚Äî üìã –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã (/orders)")
    await state.finish()

@dp.message_handler(commands=["neworder"])
async def new_order(message: types.Message):
    if message.from_user.id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏ /start")
        return
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    await Order.waiting_for_description.set()

@dp.message_handler(state=Order.waiting_for_description)
async def process_order(message: types.Message, state: FSMContext):
    orders.append({"user_id": message.from_user.id, "text": message.text})
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
    await state.finish()

@dp.message_handler(commands=["orders"])
async def list_orders(message: types.Message):
    if not orders:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
    for i, order in enumerate(orders):
        if order["user_id"] != message.from_user.id:
            text += f"{i+1}. {order['text']}\n–ù–∞–ø–∏—à–∏ /take_{i} —á—Ç–æ–±—ã –≤–∑—è—Ç—å\n\n"
    await message.answer(text)

@dp.message_handler(lambda message: message.text.startswith("/take_"))
async def take_order(message: types.Message):
    try:
        index = int(message.text.split("_")[1])
        order = orders[index]
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if message.from_user.id == order["user_id"]:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.")
        return

    taken_orders[message.from_user.id] = order
    orders.pop(index)
    await message.answer("‚úÖ –¢—ã –≤–∑—è–ª –∑–∞–∫–∞–∑. –ó–∞–∫–∞–∑—á–∏–∫ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—ë–Ω (—á–∞—Ç –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
