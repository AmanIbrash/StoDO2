import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–º–µ–Ω–∏ "YOUR_BOT_TOKEN" –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
API_TOKEN = '7641233572:AAH6ncl_6JvsO-dqTVDtxLwV3xMrrFw3IiQ'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect('studo.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER UNIQUE,
    name TEXT,
    university TEXT,
    specialty TEXT,
    group_name TEXT,
    year INTEGER
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    description TEXT,
    price INTEGER,
    deadline TEXT,
    status TEXT DEFAULT 'active',
    FOREIGN KEY (user_id) REFERENCES users (tg_id)
)
''')
conn.commit()

# States –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
class Registration(StatesGroup):
    name = State()
    university = State()
    specialty = State()
    group = State()
    year = State()

class CreateOrder(StatesGroup):
    title = State()
    description = State()
    price = State()
    deadline = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE tg_id = ?', (user_id,))
    user = cursor.fetchone()

    if user:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /new_order, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑, –∏–ª–∏ /orders, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã.")
    else:
        await Registration.name.set()
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è.\n–í–≤–µ–¥–∏ —Å–≤–æ—ë **–§–ò–û**:")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –§–ò–û
@dp.message_handler(state=Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await Registration.next()
    await message.answer("üéì –í –∫–∞–∫–æ–º **—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ** —Ç—ã —É—á–∏—à—å—Å—è?")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
@dp.message_handler(state=Registration.university)
async def process_university(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['university'] = message.text

    await Registration.next()
    await message.answer("üìö –ö–∞–∫–∞—è —É —Ç–µ–±—è **—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å**?")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
@dp.message_handler(state=Registration.specialty)
async def process_specialty(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['specialty'] = message.text

    await Registration.next()
    await message.answer("üë• –í –∫–∞–∫–æ–π **–≥—Ä—É–ø–ø–µ** —Ç—ã —É—á–∏—à—å—Å—è?")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≥—Ä—É–ø–ø–∞
@dp.message_handler(state=Registration.group)
async def process_group(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = message.text

    await Registration.next()
    await message.answer("üìÜ –ù–∞ –∫–∞–∫–æ–º **–∫—É—Ä—Å–µ** —Ç—ã —É—á–∏—à—å—Å—è? (1, 2, 3, ...)")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∫—É—Ä—Å
@dp.message_handler(state=Registration.year)
async def process_year(message: types.Message, state: FSMContext):
    try:
        year = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (1, 2, 3, ...)")
        return

    async with state.proxy() as data:
        data['year'] = year
        cursor.execute('''
        INSERT INTO users (tg_id, name, university, specialty, group_name, year)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (message.from_user.id, data['name'], data['university'], data['specialty'], data['group'], data['year']))
        conn.commit()

    await state.finish()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã (/new_order) –∏–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ (/orders).")

# –ö–æ–º–∞–Ω–¥–∞ /new_order - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message_handler(commands=['new_order'])
async def new_order(message: types.Message):
    await CreateOrder.title.set()
    await message.answer("üèó –í–≤–µ–¥–∏ **–Ω–∞–∑–≤–∞–Ω–∏–µ** –∑–∞–∫–∞–∑–∞:")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ
@dp.message_handler(state=CreateOrder.title)
async def process_order_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text

    await CreateOrder.next()
    await message.answer("üìù –ù–∞–ø–∏—à–∏ **–æ–ø–∏—Å–∞–Ω–∏–µ** –∑–∞–∫–∞–∑–∞:")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –æ–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(state=CreateOrder.description)
async def process_order_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text

    await CreateOrder.next()
    await message.answer("üí∞ –£–∫–∞–∂–∏ **—Ü–µ–Ω—É** (–≤ —Ä—É–±–ª—è—Ö):")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: —Ü–µ–Ω–∞
@dp.message_handler(state=CreateOrder.price)
async def process_order_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000)")
        return

    async with state.proxy() as data:
        data['price'] = price

    await CreateOrder.next()
    await message.answer("‚è≥ –£–∫–∞–∂–∏ **—Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–æ 15 –∏—é–Ω—è'):")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –¥–µ–¥–ª–∞–π–Ω
@dp.message_handler(state=CreateOrder.deadline)
async def process_order_deadline(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deadline'] = message.text
        cursor.execute('''
        INSERT INTO orders (user_id, title, description, price, deadline)
        VALUES (?, ?, ?, ?, ?)
        ''', (message.from_user.id, data['title'], data['description'], data['price'], data['deadline']))
        conn.commit()

    await state.finish()
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –µ–≥–æ —É–≤–∏–¥–µ—Ç—å —á–µ—Ä–µ–∑ /orders.")

# –ö–æ–º–∞–Ω–¥–∞ /orders - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(commands=['orders'])
async def show_orders(message: types.Message):
    cursor.execute('SELECT * FROM orders WHERE status = "active"')
    orders = cursor.fetchall()

    if not orders:
        await message.answer("üòï –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders:
        order_id, user_id, title, description, price, deadline, status = order
        await message.answer(
            f"üìå **{title}**\n"
            f"üìù {description}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
            f"‚è≥ –°—Ä–æ–∫: {deadline}\n"
            f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}\n\n"
            f"–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏ /take_order_{order_id}",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda message: message.text.startswith('/take_order_'))
async def take_order(message: types.Message):
    try:
        order_id = int(message.text.split('_')[-1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return

    cursor.execute('SELECT * FROM orders WHERE id = ? AND status = "active"', (order_id,))
    order = cursor.fetchone()

    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
        return

    cursor.execute('UPDATE orders SET status = "taken" WHERE id = ?', (order_id,))
    conn.commit()

    order_creator_id = order[1]
    await bot.send_message(
        order_creator_id,
        f"üéâ –¢–≤–æ–π –∑–∞–∫–∞–∑ **{order[2]}** –≤–∑—è–ª @{message.from_user.username}! –°–≤—è–∂–∏—Å—å —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        parse_mode="Markdown"
    )

    await message.answer(f"‚úÖ –¢—ã –≤–∑—è–ª –∑–∞–∫–∞–∑! –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ï–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç: @{order_creator_id}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
